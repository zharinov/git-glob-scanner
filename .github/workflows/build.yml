name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  ZIG_VERSION: 0.10.1
  RUST_VERSION: 1.70.0

jobs:
  setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v3.3.2
        with:
          key: node_modules-${{ hashFiles('**/yarn.lock') }}
          path: node_modules

      - name: Install dependencies
        run: test -d node_modules || yarn install --frozen-lockfile

      - name: Type check
        run: yarn -s lint:types

  setup-zig:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Zig
        uses: actions/cache@v3.3.2
        with:
          key: zig-${{ env.ZIG_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: /opt/hostedtoolcache/zig/${{ env.ZIG_VERSION }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2.1.1
        with:
          version: ${{ env.ZIG_VERSION }}

  setup-rust:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust toolchain
        uses: actions/cache@v3.3.2
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Install Rust toolchain
        run: rustup install --profile minimal ${{ env.RUST_VERSION }}

  setup-cargo-xwin:
    needs: [setup-rust]
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust toolchain
        uses: actions/cache@v3.3.2
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Install Rust toolchain
        run: |
          rustup install --profile minimal ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}

      - name: Cache `cargo-xwin`
        uses: actions/cache@v3.3.2
        with:
          key: cargo-xwin-rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.cargo/bin/cargo-xwin

      - name: Install `cargo-xwin`
        run: test -f ~/.cargo/bin/cargo-xwin || cargo install cargo-xwin

  setup-cargo-zigbuild:
    needs: [setup-rust]
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust toolchain
        uses: actions/cache@v3.3.2
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Install Rust toolchain
        run: |
          rustup install --profile minimal ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}

      - name: Cache `cargo-zigbuild`
        uses: actions/cache@v3.3.2
        with:
          key: cargo-zigbuild-rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.cargo/bin/cargo-zigbuild

      - name: Install `cargo-zigbuild`
        run: test -f ~/.cargo/bin/cargo-zigbuild || cargo install cargo-zigbuild

  build:
    needs: [setup-node, setup-zig, setup-rust, setup-cargo-xwin, setup-cargo-zigbuild]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: 'linux', arch: 'x64' }
          - { os: 'linux', arch: 'arm64' }
          - { os: 'linux', arch: 'x86' }
          - { os: 'windows', arch: 'x64' }
          - { os: 'windows', arch: 'arm64' }
          - { os: 'windows', arch: 'x86' }
          - { os: 'macos', arch: 'x64' }
          - { os: 'macos', arch: 'arm64' }
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18

      - name: Cache `node_modules`
        uses: actions/cache@v3.3.2
        with:
          key: node_modules-${{ hashFiles('**/yarn.lock') }}
          path: node_modules

      - name: Install `node_modules`
        run: test -d node_modules || yarn install --frozen-lockfile

      - name: Cache Rust toolchain
        uses: actions/cache@v3.3.2
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Install Rust toolchain
        id: rust-toolchain
        run: |
          rustup install --profile minimal ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}
          echo "rust-toolchain=$(rustup show active-toolchain | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2.4.0
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}
          cache-all-crates: true
          cache-on-failure: true
          cache-targets: false

      - name: Cache `cargo-xwin`
        if: matrix.os == 'windows'
        uses: actions/cache@v3.3.2
        with:
          key: cargo-xwin-rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.cargo/bin/cargo-xwin

      - name: Install `cargo-xwin`
        if: matrix.os == 'windows'
        run: test -f ~/.cargo/bin/cargo-xwin || cargo install cargo-xwin

      - name: Cache `cargo-zigbuild`
        if: matrix.os != 'windows'
        uses: actions/cache@v3.3.2
        with:
          key: cargo-zigbuild-rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.cargo/bin/cargo-zigbuild

      - name: Install `cargo-zigbuild`
        if: matrix.os != 'windows'
        run: test -f ~/.cargo/bin/cargo-zigbuild || cargo install cargo-zigbuild

      - name: Cache Zig
        if: matrix.os != 'windows'
        uses: actions/cache@v3.3.2
        with:
          key: zig-${{ env.ZIG_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: /opt/hostedtoolcache/zig/${{ env.ZIG_VERSION }}

      - name: Install Zig
        if: matrix.os != 'windows'
        uses: goto-bus-stop/setup-zig@v2.1.1
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Install Rust target
        run: yarn -s build:install-rust-target "${{ matrix.os }}-${{ matrix.arch }}"

      - name: Cache `target` folder
        uses: actions/cache@v3.3.2
        with:
          key: target-folder-rust-${{ env.RUST_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: target

      - name: Create dist folder
        run: yarn -s build:create-dist-folder "${{ matrix.os }}-${{ matrix.arch }}"

      - name: Build
        run: yarn -s build:build-node-binary "${{ matrix.os }}-${{ matrix.arch }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: dist
          path: dist

  passing:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: always()
    steps:
      - if: needs.build.result != 'success'
        run: exit 1

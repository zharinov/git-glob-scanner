name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  ZIG_VERSION: 0.10.1
  RUST_VERSION: 1.70.0

jobs:
  setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v3.3.1
        with:
          key: node_modules-${{ hashFiles('**/yarn.lock') }}
          path: node_modules

      - name: Install dependencies
        run: test -d node_modules || yarn install --frozen-lockfile

  setup-zig:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Zig
        uses: actions/cache@v3.3.1
        with:
          key: zig-${{ env.ZIG_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: /opt/hostedtoolcache/zig/${{ env.ZIG_VERSION }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2.0.2
        with:
          version: ${{ env.ZIG_VERSION }}

  setup-rust:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust toolchain
        uses: actions/cache@v3.3.1
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Install Rust toolchain
        run: rustup install --profile minimal ${{ env.RUST_VERSION }}

  setup-cargo-xwin:
    needs: [setup-rust]
    runs-on: ubuntu-latest
    steps:
      - name: Restore Rust toolchain from cache
        uses: actions/cache@v3.3.1
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Setup Rust toolchain
        run: |
          rustup install --profile minimal ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}

      - name: Restore `cargo-xwin` from cache
        uses: actions/cache@v3.3.1
        with:
          key: cargo-xwin-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: target/cargo-xwin

      - name: Install `cargo-xwin`
        run: cargo install --target-dir target/cargo-xwin cargo-xwin

  setup-cargo-zigbuild:
    needs: [setup-rust]
    runs-on: ubuntu-latest
    steps:
      - name: Restore Rust toolchain from cache
        uses: actions/cache@v3.3.1
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Setup Rust toolchain
        run: |
          rustup install --profile minimal ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}

      - name: Restore `cargo-zigbuild` from cache
        uses: actions/cache@v3.3.1
        with:
          key: cargo-zigbuild-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: target/cargo-zigbuild

      - name: Install `cargo-zigbuild`
        run: cargo install --target-dir target/cargo-zigbuild cargo-zigbuild

  build:
    needs: [setup-node, setup-zig, setup-rust, setup-cargo-xwin, setup-cargo-zigbuild]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ['linux', 'windows', 'macos']
        arch: ['x64', 'arm64']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18

      - name: Restore `node_modules` from cache
        uses: actions/cache@v3.3.1
        with:
          key: node_modules-${{ hashFiles('**/yarn.lock') }}
          path: node_modules

      - name: Install Node dependencies
        run: test -d node_modules || yarn install --frozen-lockfile

      - name: Restore Rust toolchain from cache
        uses: actions/cache@v3.3.1
        with:
          key: rust-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: ~/.rustup/toolchains/${{ env.RUST_VERSION }}-*

      - name: Setup Rust toolchain
        id: rust-toolchain
        run: |
          rustup install --profile minimal ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}
          echo "rust-toolchain=$(rustup show active-toolchain | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2.4.0
        with:
          cache-all-crates: 'true'
          cache-on-failure: 'true'

      - name: Restore `cargo-xwin` from cache
        if: matrix.os == 'windows'
        uses: actions/cache@v3.3.1
        with:
          key: cargo-xwin-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: target/cargo-xwin

      - name: Install `cargo-xwin`
        if: matrix.os == 'windows'
        run: cargo install --target-dir target/cargo-xwin cargo-xwin

      - name: Restore `cargo-zigbuild` from cache
        if: matrix.os != 'windows'
        uses: actions/cache@v3.3.1
        with:
          key: cargo-zigbuild-${{ env.RUST_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: target/cargo-zigbuild

      - name: Install `cargo-zigbuild`
        if: matrix.os != 'windows'
        run: cargo install --target-dir target/cargo-zigbuild cargo-zigbuild

      - name: Restore Zig from cache
        if: matrix.os != 'windows'
        uses: actions/cache@v3.3.1
        with:
          key: zig-${{ env.ZIG_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: /opt/hostedtoolcache/zig/${{ env.ZIG_VERSION }}

      - name: Install Zig
        if: matrix.os != 'windows'
        uses: goto-bus-stop/setup-zig@v2.0.2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Detect Rust target
        id: rust-target
        env:
          TARGET: ${{ matrix.os }}-${{ matrix.arch }}
          TOOLCHAIN: ${{ steps.rust-toolchain.outputs.rust-toolchain }}
        run: |
          echo "target-manifest=$(yarn -s build:rust-target-manifest $TARGET $TOOLCHAIN)" >> "$GITHUB_OUTPUT"
          echo "target-dir=$(yarn -s build:rust-target-dir $TARGET $TOOLCHAIN)" >> "$GITHUB_OUTPUT"

      - name: Cache Rust target
        uses: actions/cache@v3.3.1
        env:
          TARGET: ${{ matrix.os }}-${{ matrix.arch }}
          TARGET_MANIFEST: ${{ steps.rust-target.outputs.target-manifest }}
          TARGET_DIR: ${{ steps.rust-target.outputs.target-dir }}
        with:
          key: rust-target-${{ env.TARGET }}-${{ hashFiles(env.TARGET_MANIFEST) }}
          path: |
            ${{ env.TARGET_MANIFEST }}
            ${{ env.TARGET_DIR }}

      - name: Install Rust target
        run: yarn -s build:install-rust-target "${{ matrix.os }}-${{ matrix.arch }}"

      # - name: Create dist folders
      #   run: yarn -s build:create-dist-folders

      # - name: Build node binaries
      #   run: yarn -s build:build-node-binaries
